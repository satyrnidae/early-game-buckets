plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    accessWidenerPath.set(project(":common").loom.accessWidenerPath)

    mixin {
        defaultRefmapName = "${project.rootProject.name}.${project.name}.refmap.json"
    }

    forge {
        mixinConfig "${project.rootProject.name}.common.mixins.json"
        mixinConfig "${project.rootProject.name}.${project.name}.mixins.json"
    }
    runs {
        data {
            data()
            programArgs "--all", "--mod", project.rootProject.name
            programArgs "--output", file("../common/src/generated").absolutePath
            programArgs "--validate"
            programArgs "--existing", file("../common/src/main/resources").absolutePath
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
    // at runtime, use the full JEI jar for Fabric
    modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
